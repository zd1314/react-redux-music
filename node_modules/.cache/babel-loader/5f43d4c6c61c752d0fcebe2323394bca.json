{"ast":null,"code":"var _jsxFileName = \"/Users/jusfoun/Desktop/me/zdd/react-redux-music/src/components/process/process.js\";\nimport React from 'react';\nimport music from './music.png';\nimport gold from './gold.png';\n\nclass Process extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{\n        name: \"绿钻豪华版：未开通\",\n        val: 50,\n        text: ['LV0', 'LV1']\n      }, {\n        name: \"付费音乐包：未开通\",\n        val: 90,\n        text: ['LV1', 'LV2']\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"return \", React.createElement(\"div\", {\n      style: {\n        borderBottom: '1px solid #ededed',\n        boxSizing: 'border-box',\n        paddingLeft: 10,\n        paddingTop: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        marginBottom: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        width: 16,\n        height: 16,\n        background: \"url(\".concat(bg, \") no-repeat\"),\n        display: 'block',\n        marginLeft: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"container\",\n      ref: ref => this.container = ref,\n      style: {\n        width: 172\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      ref: ref => this._circle0 = ref,\n      style: {\n        borderColor: '#f0f0f0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      ref: ref => this._circle1 = ref,\n      style: {\n        borderColor: '#f0f0f0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"process-wrap\",\n      ref: ref => this._process = ref,\n      style: {\n        width: 0\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"waterPop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.props.text1 || 'VL0'), React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.props.text2 || 'VL1')))), React.createElement(\"div\", {\n      style: {\n        fontSize: 12,\n        color: '#666',\n        marginBottom: 10,\n        marginLeft: -77\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.props.name || '绿钻豪华版：未开通')), \"}\");\n  }\n\n  componentDidMount() {\n    const me = this;\n    let num = 0;\n    let w = parseFloat(this.container.style.width);\n    let timer = setInterval(() => {\n      num += 1;\n      me.state.data.map((s, i) => {\n        if (num <= s.val) {\n          let disx = this._process.style.width = num / 100 * w;\n\n          if (35 < disx && disx <= 135) {\n            me._circle0.style.borderColor = '#62bf82';\n          } else if (disx > 135) {\n            me._circle1.style.borderColor = '#62bf82';\n          }\n\n          me._process.style.width = disx + 'px';\n          console.log(me._process.style.width);\n        } else {\n          clearInterval(timer);\n        }\n      });\n    }, 60);\n  }\n\n  componentDidUpdate() {}\n\n}\n\nexport default Process;","map":{"version":3,"sources":["/Users/jusfoun/Desktop/me/zdd/react-redux-music/src/components/process/process.js"],"names":["React","music","gold","Process","Component","constructor","props","state","data","name","val","text","render","borderBottom","boxSizing","paddingLeft","paddingTop","display","marginBottom","width","height","background","bg","marginLeft","ref","container","_circle0","borderColor","_circle1","_process","text1","text2","fontSize","color","componentDidMount","me","num","w","parseFloat","style","timer","setInterval","map","s","i","disx","console","log","clearInterval","componentDidUpdate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport music from './music.png';\nimport gold from './gold.png';\nclass Process extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [\n        { name: \"绿钻豪华版：未开通\", val: 50, text: ['LV0', 'LV1'] },\n        { name: \"付费音乐包：未开通\", val: 90, text: ['LV1', 'LV2'] }\n      ]\n    }\n  }\n  render() {\n    return (\n      <div>\n        \n            return <div style={{\n              borderBottom: '1px solid #ededed',\n              boxSizing: 'border-box',\n              paddingLeft: 10,\n              paddingTop: 30\n            }} >\n\n              <div style={{\n                display: 'flex',\n                marginBottom: 10\n\n              }}>\n                <span style={{\n                  width: 16,\n                  height: 16,\n                  background: `url(${bg}) no-repeat`,\n                  display: 'block',\n                  marginLeft: 20\n                }}></span>\n                <div id='container' ref={ref => this.container = ref} style={{\n                  width: 172\n                }}>\n                  <span ref={ref => this._circle0 = ref} style={{\n                    borderColor: '#f0f0f0'\n                  }}></span>\n                  <span ref={ref => this._circle1 = ref} style={{\n                    borderColor: '#f0f0f0'\n                  }} ></span>\n                  <div className=\"process-wrap\" ref={ref => this._process = ref} style={{\n                    width: 0\n                  }}></div>\n                  <div className=\"waterPop\">\n                    <i>{this.props.text1||'VL0'}</i>\n                    <i>{this.props.text2 || 'VL1'}</i>\n                  </div>\n                </div>\n              </div>\n              <div style={{ fontSize: 12, color: '#666', marginBottom: 10, marginLeft: -77 }}>{this.props.name ||'绿钻豪华版：未开通'}</div>\n            </div>\n          \n        }\n\n      </div>\n    )\n  }\n  componentDidMount() {\n    const me = this;\n    let num = 0;\n    let w = parseFloat(this.container.style.width);\n\n    let timer = setInterval(() => {\n      num += 1;\n      me.state.data.map((s, i) => {\n        if (num <= s.val) {\n          let disx = this._process.style.width = (num / 100 * w);\n          if (35 < disx && disx <= 135) {\n            me._circle0.style.borderColor = '#62bf82'\n          }\n          else if (disx > 135) {\n            me._circle1.style.borderColor = '#62bf82'\n          }\n          me._process.style.width = disx + 'px';\n          console.log(me._process.style.width)\n        } else {\n          clearInterval(timer)\n        }\n      })\n      \n    }, 60)\n  }\n  componentDidUpdate() {\n    \n  }\n}\nexport default Process;"]},"metadata":{},"sourceType":"module"}